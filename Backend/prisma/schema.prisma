generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  credit         Int              @default(60)
  rating         Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userCourse     UserCourse[]
  hostedMeetings ZoomMeeting[]    @relation(name: "UserHostedMeetings")
  TAAvailability TAAvailability[]
  StudentRequest StudentRequest[]
}

model Course {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  userCourse     UserCourse[]
  ZoomMeetings   ZoomMeeting[]
  TAAvailability TAAvailability[]
  StudentRequest StudentRequest[]
  StickyNote     StickyNote[]
}

model UserCourse {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [user_id], references: [id])
  user_id   Int
  course    Course @relation(fields: [course_id], references: [id])
  course_id Int
  role      Role

  @@unique([user_id, course_id])
}

enum Role {
  Student
  TA
}

model ZoomMeeting {
  id        Int      @id @default(autoincrement())
  topic     String
  joinUrl   String
  startTime DateTime
  course    Course   @relation(fields: [course_id], references: [id])
  course_id Int
  host      User     @relation("UserHostedMeetings", fields: [host_id], references: [id])
  host_id   Int
  createdAt DateTime @default(now())
}

model TAAvailability {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  course    Course   @relation(fields: [course_id], references: [id])
  course_id Int
  intervals Json
  rate      Int
  createdAt DateTime @default(now())
}

model StudentRequest {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [id])
  user_id           Int
  course            Course   @relation(fields: [course_id], references: [id])
  course_id         Int
  intervals         Json
  sessionsPerWeek   Int
  maxSessionsPerDay Int
  weeklyBudget      Int
  createdAt         DateTime @default(now())
}

model StickyNote {
  id                Int                 @id @default(autoincrement())
  course_id         Int
  course            Course              @relation(fields: [course_id], references: [id])
  content           String              @default("")
  x                 Int
  y                 Int
  isLocked          Boolean             @default(false)
  lockedBy          Int?
  updatedAt         DateTime            @updatedAt
  StickyNoteVersion StickyNoteVersion[]
}

model StickyNoteVersion {
  id        Int        @id @default(autoincrement())
  noteId    Int
  note      StickyNote @relation(fields: [noteId], references: [id])
  content   String     @default("")
  editedBy  Int
  timestamp DateTime   @default(now())
}
